---
import { Icon } from "astro-icon/components";
import DarkMode from "./DarkMode.astro";
import ResponsiveToggle from "./ResponsiveToggle.astro";
---

<div id="main-navigation" class="is-desktop bg-background py-8">
  <div class="nav-container">
    <a href=`/` class="flex items-center gap-2 !no-underline">
      <span class="max-w-[47px]"><Icon size={36} name="logo" title="logo" /></span>
      <span class="font-bold">mkz.dev</span>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <div class="wrapper">
        <DarkMode />
      </div>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    // variables
    const mainNav = document.querySelector("#main-navigation");
    const mainMenu = mainNav!.querySelector("ul");
    const dropdownMenus = [...document.querySelectorAll(".has-dropdown button")] as HTMLButtonElement[];
    // functions
    const setActiveMenuItem = () => {
      const mobileDesktopMenus = mainNav!.querySelectorAll("nav > ul");
      const currenPathname = window.location.pathname;

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[];

        menuItems.forEach((menuItem) => {
          if (
            currenPathname.match(new RegExp(menuItem.pathname.replace(/\//g, "\\/"), "i")) &&
            menuItem.textContent !== "Home"
          ) {
            menuItem.classList.add("is-active");
            menuItem.setAttribute("aria-current", "page");
            if (menuItem.parentElement?.classList.contains("submenu-item")) {
              menuItem.closest(".menu-item")?.querySelector("button")?.classList.add("is-active");
            }
          } else if (menuItem.textContent === "Home" && currenPathname === "/") {
            menuItem.classList.add("is-active");
            menuItem.setAttribute("aria-current", "page");
          }
        });
      });
    };

    const checkMenuSize = () => {
      const mainNavWidth = mainNav!.getBoundingClientRect().width;
      const desktopMenuWidth = document.querySelector(".desktop-menu")!.getBoundingClientRect().width;
      const logoWidthBuffer = 300;
      const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

      if (totalMenuWidth >= mainNavWidth) {
        mainNav!.classList.remove("is-desktop");
        mainNav!.classList.add("is-mobile");
      } else if (totalMenuWidth <= mainNavWidth) {
        mainNav!.classList.add("is-desktop");
        mainNav!.classList.remove("is-mobile");
      }
    };

    const isOutOfViewport = (element: Element) => {
      const elementBounds = element.getBoundingClientRect();
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth);
    };

    const openDropdownMenu = (dropdownMenu: HTMLElement) => {
      if (!dropdownMenu || !dropdownMenu.parentNode) {
        return;
      }
      const dropdownList = dropdownMenu.parentNode.querySelector("ul");

      dropdownMenu.classList.add("show");
      dropdownMenu.setAttribute("aria-expanded", "true");

      if (dropdownList && isOutOfViewport(dropdownList)) {
        dropdownList.style.left = "auto";
      }
    };

    const closeDropdownMenu = (dropdownMenu: HTMLElement) => {
      dropdownMenu.classList.remove("show");
      dropdownMenu.setAttribute("aria-expanded", "false");
    };

    const closeAllDropdownMenus = () => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i]);
      }
    };

    const toggleDropdownMenu = (event: Event) => {
      if (event.target !== null && (event.target as HTMLElement).getAttribute("aria-expanded") === "false") {
        closeAllDropdownMenus();
        openDropdownMenu(event.target as HTMLElement);
      } else {
        closeDropdownMenu(event.target as HTMLElement);
      }
    };

    // execution
    mainMenu &&
      mainMenu.addEventListener("keydown", (event) => {
        const element = event.target as Element;
        const currentMenuItem = element.closest("li") as HTMLElement;
        const menuItems = [...mainMenu.querySelectorAll(".menu-item")] as HTMLElement[];
        const currentDropdownMenu = element.closest(".has-dropdown button") as HTMLElement;
        const currentDropdownMenuItem = element.closest(".has-dropdown li") as HTMLElement;
        const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

        const key = event.key;
        let targetItem;

        if (key === "ArrowRight") {
          if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
            targetItem = menuItems[0];
          } else {
            targetItem = menuItems[currentIndex + 1];
          }
        }

        if (key === "ArrowLeft") {
          if (menuItems.indexOf(currentMenuItem) === 0) {
            targetItem = menuItems[menuItems.length - 1];
          } else {
            targetItem = menuItems[currentIndex - 1];
          }
        }

        if (key === "Escape") {
          targetItem = menuItems[0];
        }

        if (currentDropdownMenu) {
          const firstDropdownItem = currentDropdownMenu.nextElementSibling!.querySelector("li");

          if (key === "ArrowDown") {
            event.preventDefault();
            openDropdownMenu(currentDropdownMenu);
            targetItem = firstDropdownItem;
          }

          if (key === "Escape") {
            closeDropdownMenu(currentDropdownMenu);
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode;
          const dropdownMenuItems = [...currentDropdownList!.querySelectorAll("li")];
          const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem);

          if (key === "ArrowDown") {
            event.preventDefault();

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              targetItem = dropdownMenuItems[0];
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1];
            }
          }

          if (key === "ArrowUp") {
            event.preventDefault();

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1];
            }
          }

          if (key === "Escape") {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling;

            targetItem = currentDropdownMenu!.parentNode;
            closeAllDropdownMenus();
          }
        }

        if (targetItem) {
          targetItem.querySelector<HTMLElement>("a, button, input")!.focus();
        }
      });

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener("click", toggleDropdownMenu);
      });

    setActiveMenuItem();
    checkMenuSize();

    window.addEventListener("resize", checkMenuSize);
    window.addEventListener("click", (event) => {
      const element = event.target as Element;
      if (!element.hasAttribute("aria-haspopup") && !element.classList.contains("submenu-item")) {
        closeAllDropdownMenus();
      }
    });
  });
</script>

<style lang="scss" is:global>
  @use "../../styles/base/outline" as *;

  #main-navigation {
    > .nav-container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      padding: 0 1rem;

      @media (min-width: 768px) {
        padding: 0 2rem;
      }
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      @apply flex items-center gap-4;
    }

    nav {
      > ul.menu {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          transition: color 0.15s ease-in-out;
          @apply w-full rounded px-4 py-2 text-lg;
        }

        a:hover,
        a:focus,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-thickness: 2px;
          text-decoration-style: solid;
          text-underline-offset: 0.5rem;
          background-color: hsl(var(--accent));
        }

        .is-active {
          text-decoration: underline;
          text-decoration-thickness: 2px;
          text-decoration-style: solid;
          text-underline-offset: 0.5rem;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: -8px;
        border: none;
        color: hsl(var(--foreground));

        &:hover {
          color: hsl(var(--foreground));

          &::after {
            border-color: hsl(var(--foreground));
          }
        }

        &::after {
          content: "";
          width: 0.85rem;
          height: 0.75em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.2em 0.2em 0 0;
          border-color: hsl(var(--foreground));
          transform: rotate(135deg);
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        min-width: 260px;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        background-color: hsl(var(--background));
        border: 2px solid hsl(var(--foreground));
        box-shadow: 0 10px 20px hsl(var(--foreground) / 0.15);
        @apply rounded-lg p-4;

        li {
          @apply flex flex-row flex-nowrap items-center;
        }
      }
    }
  }

  .darkmode-toggle {
    border: none;
    @apply px-2;

    svg {
      width: 24px;
      margin-top: 4px;
    }

    svg path {
      fill: hsl(var(--foreground));
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      @apply rounded bg-accent;
      svg path {
        fill: hsl(var(--foreground));
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
</style>
